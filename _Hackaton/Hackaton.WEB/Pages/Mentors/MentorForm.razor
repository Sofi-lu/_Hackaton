@using CurrieTechnologies.Razor.SweetAlert2
@using Hackaton.Shared.Entities
@using Hackaton.WEB.Repositories
@inject SweetAlertService swal
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>


<EditForm EditContext="editContext">

    <DataAnnotationsValidator />

    <div class="mb-3">

        <label>Nombre Mentor</label>
        <div>

            <InputText width="10" @bind-Value="Mentor.Name" />

        </div>

    </div>


    <div class="mb-3">

        <label>AreaExperiencia</label>
        <div>

            <InputText width="10" @bind-Value="Mentor.AreaExperiencia" />

        </div>

    </div>

    <div class="mb-3">
        <label>Hackathon</label>
        <InputSelect class="form-control" style="width: 200px;" @bind-Value="Mentor.HackathonID">
            <option value="">Seleccionar Hackathon</option> <!-- Opción por defecto -->
            @foreach (var Hackathon in Hackathonss)
            {
                <option value="@Hackathon.ID">@Hackathon.Name</option>
            }
        </InputSelect>
    </div>





    <button class="btn btn-primary" type="button" @onclick="OnSubmit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>


</EditForm>




@code {

    // Lista de fk
    public List<Hackathon> Hackathons { get; set; } = new List<Hackathons>();

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Mentor);

        var responseHppt = await repository.GetAsync<List<Hackathon>>("/api/hackathon");
        Hackathon = responseHppt.Response!.ToList();

    }



    private EditContext editContext = null;


    protected override void OnInitialized()

    {

        editContext = new(Mentor);
    }

    [EditorRequired]
    [Parameter]
    public Mentor Mentor { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }
    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }
    public bool FormPostedSuccessfully { get; set; } = false;



    private async Task OnBeforeInternalNavigation(LocationChangingContext context)

    {

        Console.WriteLine("gurdando data");

        var formWasEdited = editContext.IsModified();



        if (!formWasEdited)

        {

            return;

        }



        if (FormPostedSuccessfully)

        {

            return;

        }



        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });



        var confirm = !string.IsNullOrEmpty(result.Value);



        if (confirm)

        {

            return;

        }



        context.PreventNavigation();

    }

}