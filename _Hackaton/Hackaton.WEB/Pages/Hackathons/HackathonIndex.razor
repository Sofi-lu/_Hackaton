@page "/hackathons"
@using CurrieTechnologies.Razor.SweetAlert2
@using Hackaton.Shared.Entities
@using Hackaton.WEB.Repositories
@using Hackaton.WEB.Shared 
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal




<h3>Hackathons</h3>
<div class="mb-3">

    <a class="btn btn-primary" href="/hackathon/Create">Crear Evento</a>


</div>

<GenericList MyList="Hackathons">

    <Body>
        <table class="table table-striped">

            <thead>

                <tr>
                    @*Columna*@
                    <th>Hackaton</th>
                </tr>

            </thead>


            <tbody>
                @foreach (var hackaton in Hackathons)
                {
                    <tr>
                        <td>
                            @*Fila*@
                            @hackaton.Name
                        </td>

                        <td>
                            @hackaton.StartDate
                        </td>

                        <td>
                            @hackaton.EndDate
                        </td>

                        <td>
                            @hackaton.topic
                        </td>

                        <td>
                            @hackaton.organizer
                        </td>

                        <td>
                            <a href="/Hackatones/edit/@hackaton.ID" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() =>DeleteAsync(hackaton))>Borrar</button>
                        </td>


                    </tr>
                }
            </tbody>

            </table>



    </Body>




</GenericList>



@code {

    public List<Hackathon> Hackathons { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Hackathon>>("/api/Hackatones");

        Hackathons = responseHppt.Response!;

    }



    private async Task DeleteAsync(Hackathon Hackaton)

    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }



        var responseHTTP = await repository.DeleteAsync<Hackathon>($"api/Hackatones/{Hackaton.ID}");



        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
