@using CurrieTechnologies.Razor.SweetAlert2
@using Hackaton.Shared.Entities
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>


<EditForm EditContext="editContext">

    <DataAnnotationsValidator />

    <div class="mb-3">

        <label>NombreEvento</label>
        <div>

            <InputText width="10" @bind-Value="Hackathon.Name" />

        </div>

    </div>

    <div class="mb-3">

        <label>Fecha Inicio</label>
        <div>

            <InputText width="10" @bind-Value="Hackathon.StartDate" />

        </div>

    </div>


    <div class="mb-3">
        <label>Fecha Fin</label>
        <div>
            <InputText width="10" @bind-Value="Hackathon.EndDate" />
        </div>
    </div>



    <div class="mb-3">

        <label>Tema</label>
        <div>

            <InputText width="10" @bind-Value="Hackathon.topic" />

        </div>

    </div>



    <div class="mb-3">

        <label>Organizador</label>
        <div>

            <InputText width="10" @bind-Value="Hackathon.organizer" />

        </div>

    </div>


    <button class="btn btn-primary" type="button" @onclick="OnSubmit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>


</EditForm>



@code {
    private EditContext editContext = null;

    protected override void OnInitialized()

    {
        editContext = new(Hackathon);
    }


    [EditorRequired]

    [Parameter]



    public Hackathon? Hackathon { get; set; }



    [EditorRequired]

    [Parameter]

    public EventCallback OnSubmit { get; set; }





    [EditorRequired]

    [Parameter]

    public EventCallback ReturnAction { get; set; }



    public bool FormPostedSuccessfully { get; set; } = false;



    private async Task OnBeforeInternalNavigation(LocationChangingContext context)

    {

        Console.WriteLine("guardando data");

        var formWasEdited = editContext.IsModified();



        if (!formWasEdited)

        {

            return;

        }



        if (FormPostedSuccessfully)

        {

            return;

        }



        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });



        var confirm = !string.IsNullOrEmpty(result.Value);



        if (confirm)

        {

            return;

        }



        context.PreventNavigation();

    }

}