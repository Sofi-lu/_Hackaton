@using CurrieTechnologies.Razor.SweetAlert2
﻿@using Hackaton.Shared.Entities
@using Hackaton.WEB.Repositories
@using Hackaton.WEB.Shared
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Nombre del equipo</label>
        <div>
            <InputText width="10" @bind-Value="Team.Name" />
        </div>
    </div>

    <div class="mb-3">
        <label>CantidadMiembros</label>
        <div>
            <InputNumber class="form-control" style="width: 200px;" @bind-Value="Team.memberCount" />
        </div>
    </div>
    <div class="mb-3">
        <label>Experienia del equipo</label>
        <div>
            <InputText width="10" @bind-Value="Team.experience" />
        </div>
    </div>


    <div class="mb-3">
        <label>Evento</label>
        <InputSelect class="form-control" style="width: 200px;" @bind-Value="Team.HackathonID">
            <option value="">Seleccionar Evento</option> <!-- Opción por defecto -->
            @foreach (var hackathon in Hackathons)
            {
                <option value="@hackathon.ID}D">@hackathon.Name</option>
            }
        </InputSelect>
    </div>

    <button class="btn btn-primary" type="button" @onclick="OnSubmit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>

</EditForm>
@code {
    private EditContext editContext = null;

    // Lista de hackatones para el <select>
    public List<Hackathon> Hackathons { get; set; } = new List<Hackathon>();



    protected override async Task OnInitializedAsync()
    {
        editContext = new(Team);

        var responseHppt = await repository.GetAsync<List<Hackathon>>("/api/hackathon");
        Hackathons = responseHppt.Response!.ToList();


    }


    [EditorRequired]
    [Parameter]
    public Team Team { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        Console.WriteLine("guardando data");
        var formWasEdited = editContext.IsModified();
        if (!formWasEdited)
        {
            return;
        }
        if (FormPostedSuccessfully)
        {
            return;
        }
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }
}